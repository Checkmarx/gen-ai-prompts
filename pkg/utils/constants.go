package utils

const SystemPrompt = `You are the Checkmarx AI Guided Remediation bot that answers technical questions related to the results of Checkmarx Static Application Security Testing (SAST). You analyze and understand both the technical aspects of the security results and common questions users may have about the results. You are capable of delivering clear, concise, and informative answers to help take appropriate action based on the findings. If a question asked is irrelevant to the mentioned source code or SAST result, answer 'I am the AI Guided Remediation assistant and can answer only on questions related to source code or SAST results or SAST Queries'.`

const (
	Confidence      = "CONFIDENCE" // this is the expected Confidence identifier
	Explanation     = "EXPLANATION"
	Fix             = "PROPOSED REMEDIATION"
	code            = "```"
	Bold            = "**"
	Bold2           = ":**"
	BoldConfidence  = Bold + Confidence + Bold
	BoldExplanation = Bold + Explanation + Bold
	BoldFix         = Bold + Fix + Bold
)

const (
	ConfidenceDescription  = " A score between 0 (low) and 100 (high) indicating the degree of Confidence in the exploitability of this vulnerability in the context of your code. <br>"
	ExplanationDescription = " An OpenAI generated description of the vulnerability. <br>"
	FixDescription         = " A customized snippet, generated by OpenAI, that can be used to remediate the vulnerability in your code. <br>"
)

// This constant is used to format the identifiers (Confidence, Explanation, Fix) and their descriptions with HTML tags
const IdentifierTitleFormat = "<span style=\"color: regular;\">%s</span><span style=\"color: grey; font-style: italic;\">%s</span>"

const UserPromptTemplate = `Checkmarx Static Application Security Testing (SAST) detected a vulnerability within the provided code snippet. The vulnerability details are provided under the title 'VULNERABILITY'. 
The attack vector is presented by a code snippet annotated by comments. There are two types of annotations:
1. Attack vector nodes: in the form ` + "`//SAST Node #X: element (element-type)`" + ` where X is the node index in the result, ` + "`element`" + ` is the name of the element through which the data flows, and the ` + "`element-type`" + ` is it's type. First and Last nodes are indicated by additional ` + "`(input)`" + ` and ` + "`(output)`" + ` respectively. 	
2. Method definitions: are annotated by a comment of the form ` + "`//FILE: /file-path/file-name:line`" + ` indicating its ` + "`file-path`" + `, ` + "`file-name`" + ` and ` + "`line`" + ` where the method begins.
An annotation comment can have multiple annotations. 
The code to review is at the end under the title 'CODE TO REVIEW'.

Please review the code below and provide a Confidence score ranging from 0 to 100.
A score of 0 means you believe the result is completely incorrect, unexploitable, and a false positive.
A score of 100 means you believe the result is completely correct, exploitable, and a true positive.

Instructions for Confidence score computation:

1. The Confidence score of a vulnerability which can be done from the Internet is much higher than from the local console.
2. The Confidence score of a vulnerability which can be done by anonymous user is much higher than of an authenticated user.
3. The Confidence score of a vulnerability with a vector starting with a stored input (like from files/db etc) cannot be more than 50.
This is also known as a second-order vulnerability
4. The Confidence score of a vulnerability with a vector containing nodes in test code, cannot be more than 50 since it does not run in production. Test code is identified either by the file name containing the word 'test' or the file path containing the word 'test'. The same reasoning applies to file names or file paths containing the words 'demo', 'example', 'sample' or the like. These also do not run in production.
5. The Confidence score of a vulnerability that outputs to a debug or trace log cannot be more than 50 since these logs are usually active only in development or test environments.
6. Pay special attention to the input and output nodes and see if they match the expected input and output for the vulnerability found. If the actual input or output does not match the expected, the Confidence score cannot be no more than 50. For example, writing to a log as the output of a Reflected XSS should get a very low score. 
7. If a node in the vulnerability vector is a sanitization node, the Confidence score should be low, even if the sanitization is not reliable.
8. If the vulnerability vector is hard to read or follow because it is long or complex, the Confidence score should be low.
9. If the vulnerability vector is hard to reproduce in a test environment, the Confidence score should be low.
10. If you don't find enough evidence about a vulnerability, just lower the score.
11. If you are not sure, just lower the Confidence - we don't want to have false positive results with a high Confidence score.

Please provide a brief Explanation for your Confidence score, don't mention all the instruction above.

Next, please provide code that remediates the vulnerability so that a developer can copy paste instead of the snippet above.

Your analysis MUST be presented in the following format:

` + Bold + Confidence + Bold +
	` number
` + "\n" + Bold + Explanation + Bold +
	` short_text
` + "\n" + Bold + Fix + Bold +
	` fixed_snippet

end-of-output

Details:
VULNERABILITY
Name: %s, CWE: %d, Language: %s

CODE TO REVIEW
IMPORTANT: pay special attention to the ANNOTATED LINES in the following code, they provide important details regarding the vulnerability and the relevance of code to production or other environments.
` + code + `
%s
` + code

const ErrMsg = "error creating prompt for result ID '%s': '%v'"
